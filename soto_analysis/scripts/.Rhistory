uniprotID_to_genomic_coord_bed(input_uniprotID, input_prot_length, "cds_bed_format")
}
folder <- "test"
uniprotID <- "Test"
savefilepath <- "~/Desktop/Staller_Lab/SFARI/soto_analysis/outputs/mutations/"
+ folder + "/" + uniprotID + ".bed"
folder <- "test"
uniprotID <- "Test"
savefilepath <- "~/Desktop/Staller_Lab/SFARI/soto_analysis/outputs/mutations/" + folder + "/" + uniprotID + ".bed"
folder <- "test"
uniprotID <- "Test"
savefilepath <- paste("~/Desktop/Staller_Lab/SFARI/soto_analysis/outputs/mutations/", folder, "/", uniprotID, ".bed", sep = "")
savefilepath
library(ensembldb)
library(EnsDb.Hsapiens.v86)
edbx <- EnsDb.Hsapiens.v86
uniprotID_to_genomic_coord_bed <- function(uniprotID, prot_length, folder) {
uni_rng <- IRanges(start = 1, end = prot_length,
names = uniprotID)
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(length(uni_gnm[[1]]) > 1) {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
savefilepath <- paste("~/Desktop/Staller_Lab/SFARI/soto_analysis/outputs/mutations/",
folder, "/", uniprotID, ".bed", sep = "")
write.table(df, savefilepath, quote=F, sep="\t", row.names=F, col.names=F)
}
# Looping through all uniprotIDs and Ends in the TF AA coords
SFARI_TF_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_TF_AA_coords.csv")
for (i in 1:nrow(SFARI_TF_AA_coords)){
input_uniprotID <- SFARI_TF_AA_coords$uniprotID[i]
input_prot_length <- SFARI_TF_AA_coords$End[i]
uniprotID_to_genomic_coord_bed(input_uniprotID, input_prot_length, "cds_bed_format")
}
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_prot_length <- SFARI_AD_AA_coords$End[i]
uniprotID_to_genomic_coord_bed(input_uniprotID, input_prot_length, "domains_bed_format")
}
View(SFARI_TF_AA_coords)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
edbx <- EnsDb.Hsapiens.v86
uniprotID_to_genomic_coord_bed <- function(uniprotID, start, end, folder) {
uni_rng <- IRanges(start = start, end = end,
names = uniprotID)
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(length(uni_gnm[[1]]) > 1) {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
savefilepath <- paste("~/Desktop/Staller_Lab/SFARI/soto_analysis/outputs/mutations/",
folder, "/", uniprotID, ".bed", sep = "")
write.table(df, savefilepath, quote=F, sep="\t", row.names=F, col.names=F)
}
# Looping through all uniprotIDs and Ends in the TF AA coords
SFARI_TF_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_TF_AA_coords.csv")
for (i in 1:nrow(SFARI_TF_AA_coords)){
input_uniprotID <- SFARI_TF_AA_coords$uniprotID[i]
input_start <- SFARI_TF_AA_coords$Start[i]
input_end <- SFARI_TF_AA_coords$End[i]
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "cds_bed_format")
}
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_start <- SFARI_AD_AA_coords$Start[i]
input_end <- SFARI_AD_AA_coords$End[i]
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "domains_bed_format")
}
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_start <- SFARI_AD_AA_coords$Start[i]
input_end <- SFARI_AD_AA_coords$End[i]
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "domains_bed_format")
}
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~\\Desktop\\Staller_Lab\\SFARI\\data\\SFARI_ADs_AA_coords.csv")
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~Desktop//Staller_Lab//SFARI//data//SFARI_ADs_AA_coords.csv")
setwd("~/Desktop/Staller_Lab/SFARI/soto_analysis/scripts")
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_start <- SFARI_AD_AA_coords$Start[i]
input_end <- SFARI_AD_AA_coords$End[i]
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "domains_bed_format")
}
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_start <- SFARI_AD_AA_coords$Start[i]
input_end <- SFARI_AD_AA_coords$End[i]
print(input_uniprotID)
print(input_start)
print(input_end)
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "domains_bed_format")
}
uniprotID_to_genomic_coord_bed <- function(uniprotID, start, end, folder) {
uni_rng <- IRanges(start = start, end = end,
names = uniprotID)
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(length(uni_gnm[[1]]) > 1) {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
savefilepath <- paste("~/Desktop/Staller_Lab/SFARI/soto_analysis/outputs/mutations/",
folder, "/", uniprotID, ".bed", sep = "")
write.table(df, savefilepath, quote=F, sep="\t", row.names=F, col.names=F)
}
uniprotID_to_genomic_coord_bed("Q9Y4A8", 251, 450, "domains_bed_format")
1/3 * (26183784 - 26183700)
1/3 * (26183784 - 26183700 + 26185048 - 26184532)
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_start <- SFARI_AD_AA_coords$Start[i]
input_end <- SFARI_AD_AA_coords$End[i]
print(input_uniprotID)
print(input_start)
print(input_end)
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "domains_bed_format")
}
uni_rng <- IRanges(start = 251, end = 400,
names = "Q9Y4A8")
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_gnm
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(length(uni_gnm[[1]]) > 1) {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
gr
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
length(uni_gnm[[1]])
uni_gnm
GRangesList(uni_gnm[[1]])
unlist(GRangesList(uni_gnm[[1]]))
unlist(uni_gnm[[1]])
uuni_gnm[[1]]
uni_gnm[[1]]
gr
uni_gnm[[1]]
len(uni_gnm)
length(uni_gnm)
length(uni_gnm[1])
uni_gnm[1]
unlist(GRangesList(uni_gnm[[1]][1]))
unlist(GRangesList(uni_gnm[[1]]))
unlist(GRangesList(uni_gnm[[1]]))
unlist(GRangesList(uni_gnm[[1]]))
uni_rng <- IRanges(start = 251, end = 400,
names = "O14770")
uni_rng <- IRanges(start = 251, end = 400,
names = "O14770")
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_gnm
length(uni_gnm[[1]]
length(uni_gnm[[1]])
length(uni_gnm[[1]])
length(uni_gnm)
length(uni_gnm[1])
length(uni_gnm[[1]])
unlist(GRangesList(uni_gnm[[1]]))
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_rng <- IRanges(start = 251, end = 400,
names = "Q9Y4A8")
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_gnm
length(uni_gnm[[1]])
typeof(uni_gnm)
uni_gnm
uni_gnm[[1]]
typeof(uni_gnm[[1]])
uni_gnm[[1]]
uni_rng <- IRanges(start = 251, end = 400,
names = "O14770")
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
typeof(uni_gnm)
typeof(uni_gnm) == "list"
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_start <- SFARI_AD_AA_coords$Start[i]
input_end <- SFARI_AD_AA_coords$End[i]
print(input_uniprotID)
print(input_start)
print(input_end)
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "domains_bed_format")
}
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(typeof(uni_gnm) == "list") {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
df
uni_rng <- IRanges(start = 251, end = 400,
names = "Q9Y4A8")
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(typeof(uni_gnm) == "list") {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
df
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(typeof(uni_gnm) == "list") {
print('hi')
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
df
type(uni_gnm[[1]])
typeof(uni_gnm[[1]])
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(typeof(uni_gnm[[1]]) == "list") {
print('hi')
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
df
uni_gnm
uni_rng <- IRanges(start = 251, end = 400,
names = "Q9Y4A8")
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_gnm
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(typeof(uni_gnm[[1]]) == "list") {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
df
library(ensembldb)
library(EnsDb.Hsapiens.v86)
edbx <- EnsDb.Hsapiens.v86
uniprotID_to_genomic_coord_bed <- function(uniprotID, start, end, folder) {
uni_rng <- IRanges(start = start, end = end,
names = uniprotID)
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
## Choosing one transcript if there are > 1 transcript for the uniprotID
# if(length(uni_gnm[[1]]) > 1) {
if (typeof(uni_gnm[[1]]) == "list") {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
savefilepath <- paste("~/Desktop/Staller_Lab/SFARI/soto_analysis/outputs/mutations/",
folder, "/", uniprotID, ".bed", sep = "")
write.table(df, savefilepath, quote=F, sep="\t", row.names=F, col.names=F, append = TRUE)
}
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_start <- SFARI_AD_AA_coords$Start[i]
input_end <- SFARI_AD_AA_coords$End[i]
print(input_uniprotID)
print(input_start)
print(input_end)
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "domains_bed_format")
}
uni_rng <- IRanges(start = 1, end = 100,
names = "O75840")
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_gnm
uni_gnm
typeof(uni_gnm[[1]])
df
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(typeof(uni_gnm[[1]]) == "list") {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
GRangesList(uni_gnm)
uni_gnm
typeof(uni_gnm[[1]])
typeof(uni_gnm[1])
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(typeof(uni_gnm[1]) == "list") {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(typeof(uni_gnm[1]) == "list") {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
df
uni_rng <- IRanges(start = 1, end = 100,
names = "O75840")
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_gnm
unlist(GRangesList(uni_gnm[[1]][1]))
## Choosing one transcript if there are > 1 transcript for the uniprotID
if(typeof(uni_gnm[1]) == "list") {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
df
uni_rng <- IRanges(start = 251, end = 400,
names = "Q9Y4A8")
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_gnm
typeof(uni_gnm[[1]])
typeof(uni_gnm[1])
uni_rng1 <- IRanges(start = 251, end = 400,
names = "Q9Y4A8")
uni_gnm1 <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_rng2 <- IRanges(start = 1, end = 100,
names = "O75840")
uni_gnm2 <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
uni_gnm1
uni_gnm2
uni_rng2 <- IRanges(start = 1, end = 100,
names = "O75840")
uni_gnm2 <- proteinToGenome(uni_rng2, edbx, idType = "uniprot_id")
uni_gnm1
uni_gnm2
len(uni_gnm1)
length(uni_gnm1)
length(uni_gnm2)
length(uni_gnm2[1])
length(uni_gnm2[1])
length(uni_gnm2[[1]])
length(uni_gnm1[[1]])
uni_gnm1[[1]][2]
uni_gnm1[[1]][1]
uni_gnm1[[1]][2]
uni_gnm1[[1]]
uni_gnm2[[1]]
typeof(uni_gnm1[[1]])
typeof(uni_gnm2[[1]])
typeof(uni_gnm1[])
typeof(uni_gnm2[])
typeof(uni_gnm1[1])
typeof(uni_gnm2[1])
typeof(uni_gnm2[[1]][1])
typeof(uni_gnm1[[1]][1])
length(uni_gnm1[[1]][1])
length(uni_gnm2[[1]][1])
uni_gnm2[[1]][1]
uni_gnm1[[1]][1]
uni_gnm1[[1]]
unlist(uni_gnm1[[1]])
GRangesList(uni_gnm1[[1]])
length(GRangesList(uni_gnm1[[1]]))
length(GRangesList(uni_gnm2[[1]]))
library(ensembldb)
library(EnsDb.Hsapiens.v86)
edbx <- EnsDb.Hsapiens.v86
uniprotID_to_genomic_coord_bed <- function(uniprotID, start, end, folder) {
uni_rng <- IRanges(start = start, end = end,
names = uniprotID)
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
## Choosing one transcript if there are > 1 transcript for the uniprotID
# if(length(uni_gnm[[1]]) > 1) {
#if (typeof(uni_gnm[[1]]) == "list") {
if (length(GRangesList(uni_gnm[[1]])) > 1) {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
savefilepath <- paste("~/Desktop/Staller_Lab/SFARI/soto_analysis/outputs/mutations/",
folder, "/", uniprotID, ".bed", sep = "")
write.table(df, savefilepath, quote=F, sep="\t", row.names=F, col.names=F, append = TRUE)
}
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_start <- SFARI_AD_AA_coords$Start[i]
input_end <- SFARI_AD_AA_coords$End[i]
print(input_uniprotID)
print(input_start)
print(input_end)
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "domains_bed_format")
}
library(ensembldb)
library(EnsDb.Hsapiens.v86)
edbx <- EnsDb.Hsapiens.v86
uniprotID_to_genomic_coord_bed <- function(uniprotID, start, end, folder) {
uni_rng <- IRanges(start = start, end = end,
names = uniprotID)
uni_gnm <- proteinToGenome(uni_rng, edbx, idType = "uniprot_id")
## Choosing one transcript if there are > 1 transcript for the uniprotID
# if(length(uni_gnm[[1]]) > 1) {
#if (typeof(uni_gnm[[1]]) == "list") {
if (length(GRangesList(uni_gnm[[1]])) > 1) {
uni_gnm[[1]] = unlist(GRangesList(uni_gnm[[1]][1]))
}
gr <- unlist(GRangesList(uni_gnm))
df <- data.frame(seqnames=seqnames(gr),
starts=start(gr)-1,
ends=end(gr),
names=elementMetadata(gr)[,1],
scores=c(rep(".", length(gr))),
strands=strand(gr))
savefilepath <- paste("~/Desktop/Staller_Lab/SFARI/soto_analysis/outputs/mutations/",
folder, "/", uniprotID, ".bed", sep = "")
write.table(df, savefilepath, quote=F, sep="\t", row.names=F, col.names=F, append = TRUE)
}
# Looping through all uniprotIDs and Ends in the TF AA coords
SFARI_TF_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_TF_AA_coords.csv")
for (i in 1:nrow(SFARI_TF_AA_coords)){
input_uniprotID <- SFARI_TF_AA_coords$uniprotID[i]
input_start <- SFARI_TF_AA_coords$Start[i]
input_end <- SFARI_TF_AA_coords$End[i]
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "cds_bed_format")
}
# Looping through all uniprotIDs and Ends in the AD AA coords
SFARI_AD_AA_coords <- read.csv("~/Desktop/Staller_Lab/SFARI/data/SFARI_ADs_AA_coords.csv")
for (i in 1:nrow(SFARI_AD_AA_coords)){
input_uniprotID <- SFARI_AD_AA_coords$uniprotID[i]
input_start <- SFARI_AD_AA_coords$Start[i]
input_end <- SFARI_AD_AA_coords$End[i]
print(input_uniprotID)
print(input_start)
print(input_end)
uniprotID_to_genomic_coord_bed(input_uniprotID, input_start, input_end, "domains_bed_format")
}
